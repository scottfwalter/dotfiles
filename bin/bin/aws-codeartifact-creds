#!/bin/bash

# AWS IAM user and config target_profile to use
user="scott.walter" # Your AWS username
target_profile_name="nice-devops" # This is the local profile name you use to when accessing these credentials (e.g., dev, test-nvir, etc.)
target_account_num="369498121101" # This is the account number of the account alias you want to access (e.g., 934137132601 is for dev. See table below for more)
role_name="GroupAccess-NICE-Architects" # Your role in the target account
source_profile="nice-identity" # This is your profile name as you configured it in .aws/credentials
main_iam_acct_num="736763050260" # This should be the nice-identity account number
default_region="us-west-2" # Default region for where your CLI session lives (e.g., us-west-2 for dev, us-east-1 for test-nvir etc.)

echo "########################### DO NOT EDIT ANYTHING BELOW THIS LINE ###############"

echo "**********************************************************************************"
echo "This script will obtain temporary credentials for $target_profile_name and store them"
echo "in your AWS CLI configuration. This will allow certain programs (e.g., IntelliJ IDEA)"
echo "to access $target_profile_name through your $source_profile account."
echo "**********************************************************************************"


AWS_SHARED_CREDENTIALS_FILE=${AWS_SHARED_CREDENTIALS_FILE:-~/.aws/credentials}

MAVEN_SETTINGS_PATH=${MAVEN_SETTINGS_PATH:-~/.m2/settings.xml}

TOKEN_PLACEHOLDER="__UPDATE_TOKEN__"

# Watinig before refresh token. In seconds
#  3540 seconds = 59 minutes
wait_before_refresh=3540

function log {
		local msg=$1
		echo "$(date +'%Y-%m-%d %T') | ${msg}"
}

function exit_on_error() {
	local exit_code = $1
	exit $exit_code
}

function aws_config_profile {
        local key=$1
        local val=$2
        local profile=$3

        aws configure set $key $val --profile $profile
        res=$?
        if [ $res -ne 0 ];
        then
                exit_on_error $res
        fi
}

# Get MFA token from user
mfa_device="arn:aws:iam::$main_iam_acct_num:mfa/$user"
read -p 'Enter MFA Code: ' mfa_token
token_expiration_seconds=129600 # 36 Hours

# Piece together role information
target_role="arn:aws:iam::$target_account_num:role/$role_name"

# Variable to hold AccessKeyId, SecretAccessKey, and SessionToken returned
# from 'aws sts assume-role' command.
MFA_PROFILE_NAME="${source_profile}-mfa-session-codeartifact"
# Create profile if not exists
aws_config_profile region $default_region $MFA_PROFILE_NAME

token_creds=`aws sts get-session-token --serial-number $mfa_device --duration-seconds $token_expiration_seconds --token-code $mfa_token --profile $source_profile`

# Check if aws command executed successfully
if [ $? -eq 0 ];
then
    ACCESS_KEY_ID=$(echo $token_creds | jq .Credentials.AccessKeyId | xargs)
    SECRET_ACCESS_KEY=$(echo $token_creds | jq .Credentials.SecretAccessKey | xargs)
    SESSION_TOKEN=$(echo $token_creds | jq .Credentials.SessionToken | xargs)
    # Set AWS credentials via CLI
    aws_config_profile aws_access_key_id $ACCESS_KEY_ID "${MFA_PROFILE_NAME}"
    aws_config_profile aws_secret_access_key $SECRET_ACCESS_KEY "${MFA_PROFILE_NAME}"
    aws_config_profile aws_session_token $SESSION_TOKEN "${MFA_PROFILE_NAME}"
    aws_config_profile region $default_region $target_profile_name

    log "Successfully cached token for $token_expiration_seconds seconds."
fi

    counter=36
    # while [ $counter -ge 1 ]
# do

	echo ""
    log "Renewing $target_profile_name access keys..."
    creds=`aws sts assume-role --role-arn $target_role --role-session-name $user --profile "${MFA_PROFILE_NAME}" --query "Credentials"`

    # Check if aws command executed successfully
if [ $? -eq 0 ];
then
    CODEARTIFACT_PROFILE_NAME="default-codeartifact"
    ACCESS_KEY_ID=$(echo $creds | jq -r .AccessKeyId | xargs)
    SECRET_ACCESS_KEY=$(echo $creds | jq -r .SecretAccessKey | xargs)
    SESSION_TOKEN=$(echo $creds | jq -r .SessionToken | xargs)
    # Set AWS credentials via CLI
    aws_config_profile aws_access_key_id $ACCESS_KEY_ID "${CODEARTIFACT_PROFILE_NAME}"
    aws_config_profile aws_secret_access_key $SECRET_ACCESS_KEY "${CODEARTIFACT_PROFILE_NAME}"
    aws_config_profile aws_session_token $SESSION_TOKEN "${CODEARTIFACT_PROFILE_NAME}"
    aws_config_profile region $default_region "${CODEARTIFACT_PROFILE_NAME}"

    log "$target_profile_name profile has been updated in ${AWS_SHARED_CREDENTIALS_FILE}"
    log "Generating codeArtifact Token."
    CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain nice-devops --domain-owner 369498121101 --query authorizationToken --output text --region us-west-2 --profile "${CODEARTIFACT_PROFILE_NAME}"`


    NPMFILE="$HOME/.npmrc"
    CODEARTIFACT_HOST=nice-devops-369498121101.d.codeartifact.us-west-2.amazonaws.com
    CODEARTIFACT_URI_PATH=/npm/cxone-npm/


    log "Upating $NPMFILE"

	# Create/re-creaet new $NPMFILE
	# tabs are indent in heredoc
    cat <<- EOF > $NPMFILE
		registry=https://${CODEARTIFACT_HOST}${CODEARTIFACT_URI_PATH}
		//${CODEARTIFACT_HOST}${CODEARTIFACT_URI_PATH}:always-auth=true
		//${CODEARTIFACT_HOST}${CODEARTIFACT_URI_PATH}:_authToken=${CODEARTIFACT_AUTH_TOKEN}
		EOF


    aws_config_profile aws_access_key_id $ACCESS_KEY_ID "${CODEARTIFACT_PROFILE_NAME}"
    aws_config_profile aws_secret_access_key $SECRET_ACCESS_KEY "${CODEARTIFACT_PROFILE_NAME}"
    aws_config_profile aws_session_token $SESSION_TOKEN "${CODEARTIFACT_PROFILE_NAME}"

    export AWS_ACCESS_KEY_ID=$ACCESS_KEY_ID
    export AWS_SECRET_ACCESS_KEY=$SECRET_ACCESS_KEY
    export AWS_SESSION_TOKEN=$SESSION_TOKEN

    aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 369498121101.dkr.ecr.us-west-2.amazonaws.com
    log "Upating Token in ${MAVEN_SETTINGS_PATH}"

	# replace passwords values to TOKEN_PLACEHOLDER
	xmlout=$(xmllint --shell ${MAVEN_SETTINGS_PATH} <<- EOF
		cd /settings/servers/*[id='plugins-codeartifact']/password
		set ${TOKEN_PLACEHOLDER}
		cd /settings/servers/*[id='cxone-codeartifact']/password
		set ${TOKEN_PLACEHOLDER}
		cd /settings/servers/*[id='platform-utils']/password
		set ${TOKEN_PLACEHOLDER}
		cat /
		EOF
	)

	# remove leaading and trailing lines. Then search for placeholder and change it to token value
	xml=$(echo "$xmlout" | tail -n +2 | sed -e "$ d" | sed "s/${TOKEN_PLACEHOLDER}/${CODEARTIFACT_AUTH_TOKEN}/")

	# Write the things out to settings.xml
	echo "$xml" > ${MAVEN_SETTINGS_PATH}
	unset xml
	unset xmlout

	log "File ${MAVEN_SETTINGS_PATH} updated"

	export CODEARTIFACT_AUTH_TOKEN
	if [ $counter -ge 1 ]; then
          plural_suffix="s"
    else
          unset plural_suffix
    fi
    log "Keep this window open to have your keys renewed every 59 minutes for the next $counter hour$plural_suffix."
 fi
#  ((counter--))
#   sleep $wait_before_refresh # 59 minutes
#  done

